//////////////////////////////
// Parses a list for a feature
//////////////////////////////
@function bp-generate($breakpoint, $base-font-size) {

  $feature:       false !default;
  $min-feature:   "min-#{$breakpoint-default-pair}" !default;
  $max-feature:   "max-#{$breakpoint-default-pair}" !default;
  $value:         false !default;
  $min-value:     false !default;
  $max-value:     false !default;
  $length:        false !default;
  $query:         false !default;


  $length: length($breakpoint);

  @if first_value_of($breakpoint) == "no query" {
    // Special handler for no-query.
    @if $length == 1 {
      $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("no query", true);
    }
    @else {
      $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("no query", nth($breakpoint, 2));
    }
  }
  @else if first_value_of($breakpoint) == 'media' {
    // Special handler for media type.
    $media: reject($breakpoint, 'media');

    $context: UU2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh("media", $media);
  }
  @else if $length == 1 {
    $value: $breakpoint;
    @if type-of($breakpoint) == 'number' {
      $feature: $breakpoint-default-feature;
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($value) == 'number' {
      $value: breakpoint-to-base-em($value, $base-font-size);
    }

    // Set Context
    $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
  }
  @else if $length == 2 {
    // If both are numbers, we've got a double!
    @if type-of(nth($breakpoint, 1)) == 'number' and type-of(nth($breakpoint, 2)) == 'number' {
      // See which is larger.
      @if nth($breakpoint, 1) > nth($breakpoint, 2) {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 1);
      }
      @else {
        $min-value: nth($breakpoint, 1);
        $max-value: nth($breakpoint, 2);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($min-value) == 'number' {
        $min-value: breakpoint-to-base-em($min-value, $base-font-size);
      }
      @if $breakpoint-to-ems and type-of($max-value) == 'number' {
        $max-value: breakpoint-to-base-em($max-value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($min-feature, $min-value);
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($max-feature, $max-value);
    }
    @else if type-of(nth($breakpoint, 1)) == 'string' and type-of(nth($breakpoint, 2)) == 'string' {
      @if breakpoint-string-value(nth($breakpoint, 1)) == true {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
    }
    @else {
      // Because we can have either the first or second option be the feature, we switch on it.
      @if type-of(nth($breakpoint, 1)) == string {
        $feature: nth($breakpoint, 1);
        $value: nth($breakpoint, 2);
      }
      @else if type-of(nth($breakpoint, 2)) == string {
        $feature: nth($breakpoint, 2);
        $value: nth($breakpoint, 1);
      }

      // If EM Breakpoints are active, do it!
      @if $breakpoint-to-ems and type-of($value) == 'number' {
        $value: breakpoint-to-base-em($value, $base-font-size);
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($feature, $value);
    }
  }
  @else if $length == 3 {
    @if type-of(nth($breakpoint, 1)) == 'string' {
      $feature: nth($breakpoint, 1);
      // See which is larger.
      @if nth($breakpoint, 2) > nth($breakpoint, 3) {
        $min-value: nth($breakpoint, 3);
        $max-value: nth($breakpoint, 2);
      }
      @else {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 3);
      }
    }
    @else {
      $feature: nth($breakpoint, 3);
      // See which is larger.
      @if nth($breakpoint, 1) > nth($breakpoint, 2) {
        $min-value: nth($breakpoint, 2);
        $max-value: nth($breakpoint, 1);
      }
      @else {
        $min-value: nth($breakpoint, 1);
        $max-value: nth($breakpoint, 2);
      }
    }

    // If EM Breakpoints are active, do it!
    @if $breakpoint-to-ems and type-of($min-value) == 'number' {
      $min-value: breakpoint-to-base-em($min-value, $base-font-size);
    }
    @if $breakpoint-to-ems and type-of($max-value) == 'number' {
      $max-value: breakpoint-to-base-em($max-value, $base-font-size);
    }

    @if breakpoint-min-max($feature) == true {
      @if $feature == 'device-pixel-ratio' {
//        $min-feature: breakpoint-experimental('min-#{$feature}', $prefix);
//        $max-feature: breakpoint-experimental('max-#{$feature}', $prefix);
      }
      @else {
        $min-feature: 'min-#{$feature}';
        $max-feature: 'max-#{$feature}';
      }

      // Set Context
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($min-feature, $min-value);
      $context: U2V0IHlvdXIgb3duIGRhbW4gY29udGV4dHMh($max-feature, $max-value);
    }
    @else {
      @warn '#{$feature} cannot have a min/max value!';
    }
  }

  @return true;
}