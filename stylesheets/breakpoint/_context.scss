//////////////////////////////
// Private Breakpoint Variables
//////////////////////////////
$private-breakpoint-context-holder: () !default;
$private-breakpoint-context-placeholder: 0;

//////////////////////////////
// Breakpoint Get Context
// $feature: Input feature to get it's current MQ context. Returns false if no context
//////////////////////////////
@function breakpoint-get-context($feature) {
  @each $context in $private-breakpoint-context-holder {
    @if $feature == nth($context, 1) {
      // strip feature name
      $values: null;
      @for $i from 2 through length($context) {
        $values: append($values, nth($context, $i), comma);
      }
      @return $values;
    }
  }

  @return false;
}

//////////////////////////////
// Private function to set context
//////////////////////////////
$bar: null;
@function private-breakpoint-set-context($feature, $value) {
  @if $value == 'monochrome' {
    $feature: 'monochrome';
  }
  $placeholder-plus-one: ($private-breakpoint-context-placeholder + 1);
  $holder: null;
  @if $private-breakpoint-context-placeholder == 1 {
    $holder: ($feature $value);
    $private-breakpoint-context-holder: append($private-breakpoint-context-holder, $holder, comma);
    @return true;
  } @else {
    $feature-used: false;
    @each $context in $private-breakpoint-context-holder {
      @if nth($context, 1) == $feature {
        $feature-used: $context;
      }
    }
    @if $feature-used != false {
      $holder: $feature;
      @for $i from 2 through $placeholder-plus-one {
        @if $i <= length($feature-used)  {
          $holder: append($holder, nth($feature-used, $i), space);
        } @elseif $i < $placeholder-plus-one {
          $holder: append($holder, false, space);
        } @else {
          $holder: append($holder, $value, space);
        }
      }
    }
    @elseif $feature-used == false {
      $holder: $feature;
      @for $i from 2 through $placeholder-plus-one {
        @if $i < $placeholder-plus-one {
          $holder: append($holder, false, space);
        } @else {
          $holder: append($holder, $value, space);
        }
      }
    }

    // Rebuild context
    $rebuild: null;
    @if $feature-used != false {
      @each $context in $private-breakpoint-context-holder {
        @if nth($context, 1) == nth($holder, 1) {
          $rebuild: append($rebuild, $holder, comma);
        } @else {
          $rebuild: append($rebuild, $context, comma);
        }
      }
    } @else {
      $rebuild: append($private-breakpoint-context-holder, $holder, comma);
    }
    $private-breakpoint-context-holder: $rebuild;

  }
  @return true;
}

//////////////////////////////
// Private function to reset context
//////////////////////////////
@mixin private-breakpoint-reset-contexts {
  $private-breakpoint-context-holder: ();
}
