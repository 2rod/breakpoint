//////////////////////////////
// Private Breakpoint Variables
//////////////////////////////
$private-breakpoint-context-holder: () !default;
$private-breakpoint-context-placeholder: 0;

//////////////////////////////
// Breakpoint Get Context
// $feature: Input feature to get it's current MQ context. Returns false if no context
//////////////////////////////
@function breakpoint-get-context($feature) {
  @each $context in $private-breakpoint-context-holder {
    @if $feature == nth($context, 1) {
      @return nth($context, 2);
    }
  }

  @return false;
}

//////////////////////////////
// Private function to set context
//////////////////////////////
$bar: null;
@function private-breakpoint-set-context($feature, $value) {
// @debug 'PBSC';
// @debug $feature;
// @debug $value;
  @if $value == 'monochrome' {
    $feature: 'monochrome';
  }


  // $holder: ($feature $value);
  // $private-breakpoint-context-holder: append($private-breakpoint-context-holder, $holder);
  // @debug $private-breakpoint-context-holder;
  // @debug breakpoint-get-context($feature);

  // What position are we?
  // Has $feature been used?
    // yes:
      // grab context($feature);
      // rebuild context
      // create a swap context variable
      // loop thru context
      // is this feature the same as the current feature?
        // yes: recreate this feature list
          // recreate this feature, adding 'false' for empty iterations
        // no: bring the correstponding item from swap
    // no:
      // create a context for this feature, adding 'false' for empty iterations

  @return true;
}

//////////////////////////////
// Private function to reset context
//////////////////////////////
@mixin private-breakpoint-reset-contexts {
  $private-breakpoint-context-holder: ();
}
