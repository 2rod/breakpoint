//////////////////////////////
// Private Breakpoint Variables
//////////////////////////////
$private-breakpoint-context-holder: () !default;
$private-breakpoint-context-placeholder: 0;

//////////////////////////////
// Breakpoint Get Context
// $feature: Input feature to get it's current MQ context. Returns false if no context
//////////////////////////////
@function breakpoint-get-context($feature) {
  @each $context in $private-breakpoint-context-holder {
    @if $feature == nth($context, 1) {
      @return nth($context, 2);
    }
  }

  @return false;
}

//////////////////////////////
// Private function to set context
//////////////////////////////
@function private-breakpoint-set-context($feature, $value) {
@debug 'PBSC';
// @debug $feature;
// @debug $value;
  @if $value == 'monochrome' {
    $feature: 'monochrome';
  }

  // build a keyed list of feature/value pairs
  @debug $private-breakpoint-context-placeholder;

  // $holder: () !default;
  // $swap: false;

  // // if not the first feature
  // @if length($private-breakpoint-context-holder) > 0 {
  //   @each $item in $private-breakpoint-context-holder {
  //     @debug $item;
  //     // if the current feature is already in our set
  //     @if nth($item, 1) == $feature {
  //       // add new feature/value to the existing item
  //       @debug 'yep';
  //     }
  //     // if the current feature is not in our set
  //     @else {
  //       //
  //       @debug 'nope';
  //     }
  //   }

  //   //
  //   @if not $swap {
  //     $append: $feature;
  //     $append: join($append, $value, space);

  //     $holder: append($holder, $append, comma);
  //   }

  //   $private-breakpoint-context-holder: $holder;
  // }
  // @else {
  //   $append: $feature;
  //   $append: join($append, $value, space);

  //   $private-breakpoint-context-holder: append($private-breakpoint-context-holder, $append, comma);
  // }

  @return true;
}

//////////////////////////////
// Private function to reset context
//////////////////////////////
@mixin private-breakpoint-reset-contexts {
  $private-breakpoint-context-holder: ();
}
