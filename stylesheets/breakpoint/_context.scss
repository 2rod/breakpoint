//////////////////////////////
// Private Breakpoint Variables
//////////////////////////////
$private-breakpoint-context-holder: () !default;

//////////////////////////////
// Breakpoint Get Context
// $feature: Input feature to get it's current MQ context. Returns false if no context
//////////////////////////////
@function breakpoint-get-context($feature) {
  @each $context in $private-breakpoint-context-holder {
    @if $feature == nth($context, 1) {
      @return nth($context, 2);
    }
  }

  @return false;
}

//////////////////////////////
// Private function to set context
//////////////////////////////
@function private-breakpoint-set-context($feature, $value) {

  @if $value == 'monochrome' {
    $feature: 'monochrome';
  }

  $holder: () !default;
  $swap: false;

  @if length($private-breakpoint-context-holder) > 0 {
    @each $item in $private-breakpoint-context-holder {
      @if nth($item, 1) == $feature {
        $append: $feature;
        $append: join($append, $value, space);

        $holder: append($holder, $append, comma);

        $swap: true;
      }
      @else {
        $holder: append($holder, $item, comma);
      }
    }

    @if not $swap {
      $append: $feature;
      $append: join($append, $value, space);

      $holder: append($holder, $append, comma);
    }

    $private-breakpoint-context-holder: $holder;
  }
  @else {
    $append: $feature;
    $append: join($append, $value, space);

    $private-breakpoint-context-holder: append($private-breakpoint-context-holder, $append, comma);
  }

  @return true;
}

//////////////////////////////
// Private function to reset context
//////////////////////////////
@mixin private-breakpoint-reset-contexts {
  $private-breakpoint-context-holder: ();
}
