/*
 * BREAKPOINT TESTS
 */


// Import Breakpoint
@import "../../stylesheets/breakpoint";

//////////////////////////////
// Breakpoint Flags
//////////////////////////////
// Default Features
// $breakpoint-default-media:    screen;
// $breakpoint-default-feature:  max-width;
// $breakpoint-default-pair:     'width';

// Default Transforms
// $breakpoint-force-media-all:    true;
// $breakpoint-to-ems:             false;
// $breakpoint-resolution:         true;

// Default No Query Options
// $breakpoint-no-queries:       false;
// $breakpoint-no-query-wrappers: false;

// Deftault Base Font Size
// $breakpoint-base-font-size: 16px;


// TESTS

$single-pixel-value: 500px;
$single-em-value: 30em;
$breakpoint-to-ems: false;
/*
 * Assume $breakpoint-default-feature
 * if only a number
 * $single-pixel-value: #{$single-pixel-value};
 * $single-em-value: #{$single-em-value};
 */
.breakpoint-default-feature {
  @include breakpoint($single-pixel-value) {
    content: '$single-pixel-value';
    content: '@media (min-width: 500px)';
  }
  @include breakpoint($single-em-value) {
    content: '$single-em-value';
    content: '@media (min-width: 30em)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.breakpoint-default-feature-to-ems {
  @include breakpoint($single-pixel-value) {
    content: '$single-pixel-value';
    content: '@media (min-width: 31.25em)';
  }
  @include breakpoint($single-em-value) {
    content: '$single-em-value';
    content: '@media (min-width: 30em)';
  }
}



$feature-first: height 500px ;
$value-first: 500px height;
$arbitrary-feature: lion 500px;
$feature-value-both-strings: portrait orientation;
$breakpoint-to-ems: false;
/*
 * Single value with feature
 * $feature-first : #{$feature-first};
 * $value-first : #{$value-first};
 * $arbitrary-feature : #{$arbitrary-feature};
 * $feature-value-both-strings : #{$feature-value-both-strings};
 */
.feature-value-pair {
  @include breakpoint($feature-first) {
    content: '$feature-first';
    content: '@media (height: 500px)';
  }
  @include breakpoint($value-first) {
    content: '$value-first';
    content: '@media (height: 500px)';
  }
  @include breakpoint($arbitrary-feature) {
    content: '$arbitrary-feature';
    content: '@media (lion: 500px)';
  }
  @include breakpoint($feature-value-both-strings) {
    content: '$feature-value-both-strings';
    content: '@media (orientation: portrait)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.feature-value-pair-to-ems {
  @include breakpoint($feature-first) {
    content: '$feature-first';
    content: '@media (height: 31.25em)';
  }
  @include breakpoint($value-first) {
    content: '$value-first';
    content: '@media (height: 31.25em)';
  }
  @include breakpoint($arbitrary-feature) {
    content: '$arbitrary-feature';
    content: '@media (lion: 31.25em)';
  }
}



$min-max-default-feature: 500px 700px;
$breakpoint-to-ems: false;
/*
 * Set min-width/max-width
 * if both values are numbers
 * $min-max-default-feature : #{$min-max-default-feature};
 */
.min-max-default-feature {
  @include breakpoint($min-max-default-feature) {
    content: '$min-max-default-feature';
    content: '@media (min-width: 500px) and (max-width: 700px)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.min-max-default-feature-to-ems {
  @include breakpoint($min-max-default-feature) {
    content: '$min-max-default-feature';
    content: '@media (min-width: 31.25em) and (max-width: 43.75em)';
  }
}



$feature-min-max: height 300px 700px;
$min-max-feature: 300px 700px height;
$arbitrary-feature-min-max: lion 300px 700px;
$breakpoint-to-ems: false;
/*
 * Set min/max of feature
 * if there are two numbers and a feature
 * $feature-min-max : #{$feature-min-max};
 * $min-max-feature : #{$min-max-feature};
 * $arbitrary-feature-min-max : #{$arbitrary-feature-min-max};
 */
.min-max-feature {
  @include breakpoint($feature-min-max) {
    content: '$feature-min-max';
    content: '@media (min-height: 300px) and (max-height: 700px)';
  }
  @include breakpoint($min-max-feature) {
    content: '$min-max-feature';
    content: '@media (min-height: 300px) and (max-height: 700px)';
  }
  @include breakpoint($arbitrary-feature-min-max) {
    content: '$arbitrary-feature-min-max';
    content: '@media (min-lion: 300px) and (max-lion: 700px)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.min-max-feature-to-ems {
  @include breakpoint($feature-min-max) {
    content: '$feature-min-max';
    content: '@media (min-height: 18.75em) and (max-height: 43.75em)';
  }
  @include breakpoint($min-max-feature) {
    content: '$min-max-feature';
    content: '@media (min-height: 18.75em) and (max-height: 43.75em)';
  }
  @include breakpoint($arbitrary-feature-min-max) {
    content: '$arbitrary-feature-min-max';
    content: '@media (min-lion: 18.75em) and (max-lion: 43.75em)';
  }
}


$multidimensional: (max-width 700px) (orientation portrait);
$breakpoint-to-ems: false;
/*
 * Multidimensional lists,
 * assume each item is a feature value pair
 * $multidimensional : #{$multidimensional};
 */
.multidimensional {
  @include breakpoint($multidimensional) {
    content: '$multidimensional';
    content: '@media (max-width: 700px) and (orientation: portrait)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.multidimensional-to-ems {
  @include breakpoint($multidimensional) {
    content: '$multidimensional';
    content: '@media (max-width: 43.75em) and (orientation: portrait)';
  }
}


$basic-or: 500px, tv 700px color;
$breakpoint-to-ems: false;
/*
 * 'OR' mediaqueries.
 * tests separated by commas
 * $basic-or : #{$basic-or};
 */
.basic-or {
  @include breakpoint($basic-or) {
    content: '$basic-or';
    content: '@media (max-width: 700px) and (orientation: portrait)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.basic-or-to-ems {
  @include breakpoint($basic-or) {
    content: '$basic-or';
    content: '@media (max-width: 43.75em) and (orientation: portrait)';
  }
}


$monochrome: monochrome;
$multidimensional-plus-one-sided: (max-width 700px) (orientation portrait) (monochrome);
$breakpoint-to-ems: false;
/*
 * One-sided features (ie. monochrome)
 * $monochrome : #{$monochrome};
 * $multidimensional-plus-one-sided : #{$multidimensional-plus-one-sided};
 */
.one-sided {
  @include breakpoint($monochrome) {
    content: '$monochrome';
    content: '@media (monochrome)';
  }
  @include breakpoint($multidimensional-plus-one-sided) {
    content: '$multidimensional-plus-one-sided';
    content: '@media (max-width: 700px) and (orientation: portrait) and (monochrome)';
  }
}
/* $breakpoint-to-ems: true; */
$breakpoint-to-ems: true;
.one-sided-to-ems {
  @include breakpoint($monochrome) {
    content: '$monochrome';
    content: '@media (monochrome)';
  }
  @include breakpoint($multidimensional-plus-one-sided) {
    content: '$multidimensional-plus-one-sided';
    content: '@media (max-width: 43.75em) and (orientation: portrait) and (monochrome)';
  }
}




